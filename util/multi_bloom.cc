// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"

#include "leveldb/slice.h"
#include "util/hash.h"
#include <list>
#include <boost/concept_check.hpp>
namespace leveldb {

namespace {
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

class ChildBloomFilterPolicy : public FilterPolicy {
 private:
  size_t bits_per_key_;
  size_t k_;
  int id_; //begin from 0
 public:
  explicit ChildBloomFilterPolicy(int bits_per_key,int id)
      : bits_per_key_(bits_per_key) ,id_(id){
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  virtual const char* Name() const {
    return "leveldb.BuiltinBloomFilter2";
  }

  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {
    // Compute bloom filter size (in both bits and bytes)
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64) bits = 64;

    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter
    char* array = &(*dst)[init_size];
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      uint32_t h = BloomHash(keys[i]);
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
      for (size_t j = 0; j < k_*(id_+1); j++) {
        const uint32_t bitpos = h % bits;
	 h += delta;
	 if(j < id_*k_){
	    continue;
	 }
	 array[bitpos/8] |= (1 << (bitpos % 8));
      }
    }
  }
  
  virtual void CreateFilter(const Slice *keys,int n,std::list<std::string> &dsts) const {
	return ;
  }
 
  virtual bool KeyMayMatchFilters(const Slice& key, const std::list<leveldb::Slice>& filters) const {
	return  true;
   }
  
  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len-1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }

    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k*(id_+1); j++) {
      const uint32_t bitpos = h % bits;
      h += delta;
      if(j < id_*k){
	  continue;
      }
      if ((array[bitpos/8] & (1 << (bitpos % 8))) == 0) return false;
      
    }
    return true;
  }
  
  virtual int filterNums() const{
      return 1;
}
};

class MultiFilter:public FilterPolicy{
private:
	std::list<ChildBloomFilterPolicy*> filters;
	size_t bits_per_key_;
public:
	explicit MultiFilter(int bits_per_key_per_filter[],int bits_per_key):bits_per_key_(bits_per_key){
	    int i;
	    for(i = 0 ; bits_per_key_per_filter[i]!=0 ; i++ ){
		ChildBloomFilterPolicy* ch_filter = new ChildBloomFilterPolicy(bits_per_key_per_filter[i],i);
		filters.push_back(ch_filter);
	    }
	    printf("filters size:%ld\n",filters.size());
	}
	
	virtual void CreateFilter(const Slice * keys,int n, std::string *dst) const{
	    int i = 0;
	    for(std::list<ChildBloomFilterPolicy*>::const_iterator iter = filters.begin() ; iter != filters.end() ; iter++){
		(*iter)->CreateFilter(keys,n,dst+i);
		i++;
	    }
	}
	virtual void CreateFilter(const Slice *keys,int n,std::list<std::string> &dsts) const {
	    auto dsts_iter = dsts.begin();
	    for(std::list<ChildBloomFilterPolicy*>::const_iterator iter = filters.begin() ; iter != filters.end() ; iter++){
		(*iter)->CreateFilter(keys,n,&(*dsts_iter));
		dsts_iter++;
	    }
	}
	virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const{}
	
	virtual bool KeyMayMatchFilters(const Slice& key, const std::list<Slice> &filter_strs) const{
	   std::list<ChildBloomFilterPolicy*>::const_iterator filter_iter = filters.begin();
	   for(std::list<Slice>::const_iterator filter_strs_iter = filter_strs.begin() ; filter_strs_iter != filter_strs.end() ; filter_strs_iter++){
		if(!(*filter_iter)->KeyMayMatch(key,*filter_strs_iter)){
		    return false;
		}
		filter_iter++;
	    }
	    return true;
	}
	
	virtual int filterNums() const override{
	    return filters.size();
	}
	
	virtual const char* Name() const{
	    return "leveldb.multi_bloom_filter";
	}
};

}

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key_per_filter[],int bits_per_key) {
  return new MultiFilter(bits_per_key_per_filter,bits_per_key);
}

}  // namespace leveldb
